# PostgreSQL. Versions 9.3 and up are supported.
#
# Install the pg driver:
#   gem install pg
# On macOS with Homebrew:
#   gem install pg -- --with-pg-config=/usr/local/bin/pg_config
# On Windows:
#   gem install pg
#       Choose the win32 build.
#       Install PostgreSQL and put its /bin directory on your path.
#
# Configure Using Gemfile
# gem "pg"
#
default: &default
  adapter: postgresql
  encoding: unicode
  # For details on connection pooling, see Rails configuration guide
  # https://guides.rubyonrails.org/configuring.html#database-pooling
  pool: <%= ENV.fetch("RAILS_MAX_THREADS") { 5 } %>


development:
  <<: *default
  database: <%= ENV.fetch("POSTGRES_DB") { "streaming_catalog_development" } %> # Use ENV for database name too

  # The specified database role being used to connect to PostgreSQL.
  # To create additional roles in PostgreSQL see `$ createuser --help`.
  # When left blank, PostgreSQL will use the default role. This is
  # the same name as the operating system user running Rails.
  username: <%= ENV.fetch("POSTGRES_USER") { "postgres" } %> # UNCOMMENT AND ADD ENV.fetch

  # The password associated with the PostgreSQL role (username).
  password: <%= ENV.fetch("POSTGRES_PASSWORD") { "password" } %> # UNCOMMENT AND ADD ENV.fetch

  # Connect on a TCP socket. Omitted by default since the client uses a
  # domain socket that doesn't need configuration. Windows does not have
  # domain sockets, so uncomment these lines.
  host: <%= ENV.fetch("POSTGRES_HOST") { "db" } %> # UNCOMMENT AND ADD ENV.fetch, default to 'db' for Docker Compose

  # The TCP port the server listens on. Defaults to 5432.
  # If your server runs on a different port number, change accordingly.
  port: 5432 # This can remain hardcoded as it's the standard PostgreSQL port, or also use ENV.fetch if you prefer more flexibility: <%= ENV.fetch("POSTGRES_PORT") { 5432 } %>


test:
  <<: *default
  database: <%= ENV.fetch("POSTGRES_DB") { "streaming_catalog_test" } %> # Use ENV for database name

  username: <%= ENV.fetch("POSTGRES_USER") { "postgres" } %>
  password: <%= ENV.fetch("POSTGRES_PASSWORD") { "password" } %>
  host: <%= ENV.fetch("POSTGRES_HOST") { "db" } %>
  port: 5432

# As with config/credentials.yml, you never want to store sensitive information,
# like your database password, in your source code. If your source code is
# ever seen by anyone, they now have access to your database.
#
# Instead, provide the password or a full connection URL as an environment
# variable when you boot the app. For example:
#
#   DATABASE_URL="postgres://myuser:mypass@localhost/somedatabase"
#
# If the connection URL is provided in the special DATABASE_URL environment
# variable, Rails will automatically merge its configuration values on top of
# the values provided in this file. Alternatively, you can specify a connection
# URL environment variable explicitly:
#
#   production:
#     url: <%= ENV["MY_APP_DATABASE_URL"] %>
#
# Read https://guides.rubyonrails.org/configuring.html#configuring-a-database
# for a full overview on how database connection configuration can be specified.
#
production:
  <<: *default
  database: backend_production
  username: backend
  password: <%= ENV["BACKEND_DATABASE_PASSWORD"] %>
